#!/bin/bash
temp_file=/tmp/vm-control
usb_xml=/tmp/vm-usb.xml
script_title="VM control"
menu_actions="Boot\nKill\nCPU governor\nConnect USB by id\nDisconnect USB by id\nConnect USB by port\nDisconnect USB by port"
exclude='^$'
menu_colors=""

make_usb_xml_by_port () {
	echo "<hostdev mode='subsystem' type='usb' managed='no'>
<source>
<address bus='$1' device='$2'/>
</source>
</hostdev>" > $usb_xml
}

make_usb_xml_by_id() {
	echo "<hostdev mode='subsystem' type='usb' managed='no'>
<source>
<vendor id='0x$1'/>
<product id='0x$2'/>
</source>
</hostdev>" > $usb_xml
}

#pci-stub switch
test -f /etc/modprobe.d/vfio.conf && menu_actions="${menu_actions}\nDisable GPU Passthrough"
if test -f /etc/modprobe.d/disabled-vfio.conf
then
	menu_actions="GPU PASSTHROUG DISABLED\n${menu_actions}\nEnable GPU Passthrough"
	menu_colors="-nb darkred -sb red"
fi

# Handling actions
action=$(printf "$menu_actions" | dmenu $menu_colors -l 10 -p "$script_title")
case $action in
	"Boot")
		vm_name=$(sudo virsh list --name --inactive | grep -v $exclude | dmenu -l 10 -p "$script_title: Boot")
		sudo virsh start $vm_name > $temp_file 2>&1
		notify-send "$script_title" "$(cat $temp_file)"
		;;
	"Kill")
		vm_name=$(sudo virsh list --name --state-running | grep -v $exclude | dmenu -l 10 -p "$script_title: Kill")
		sudo virsh destroy $vm_name > $temp_file 2>&1
		notify-send "$script_title" "$(cat $temp_file)"
		;;
	"Connect USB by id")
		usb_device=$(lsusb | grep -v 'hub\|Hub' | dmenu -l 20 -p "$script_title: Connect USB")
		if [ -n "$usb_device" ]
		then
			vendor=$(echo $usb_device | awk '{print $6}' | awk -F ':' '{print $1}')
			product=$(echo $usb_device | awk '{print $6}' | awk -F ':' '{print $2}')
			make_usb_xml_by_id $vendor $product
			vm_name=$(sudo virsh list --name --state-running | grep -v $exclude | dmenu -l 10 -p "$script_title: Connect to")
			sudo virsh attach-device $vm_name $usb_xml > $temp_file 2>&1
			notify-send "$script_title" "$(cat $temp_file)"
		fi
		;;
	"Disconnect USB by id")
		usb_device=$(lsusb | grep -v 'hub\|Hub' | dmenu -l 20 -p "$script_title: Connect USB")
		if [ -n "$usb_device" ]
		then
			vendor=$(echo $usb_device | awk '{print $6}' | awk -F ':' '{print $1}')
			product=$(echo $usb_device | awk '{print $6}' | awk -F ':' '{print $2}')
			make_usb_xml_by_id $vendor $product
			vm_name=$(sudo virsh list --name --state-running | grep -v $exclude | dmenu -l 10 -p "$script_title: Connect to")
			sudo virsh detach-device $vm_name $usb_xml > $temp_file 2>&1
			notify-send "$script_title" "$(cat $temp_file)"
		fi
		;;
	"Connect USB by port")
		usb_device=$(lsusb | grep -v 'hub\|Hub' | dmenu -l 20 -p "$script_title: Connect USB")
		if [ -n "$usb_device" ]
		then
			bus=$(echo $usb_device | awk '{print $2}')
			device=$(echo $usb_device | awk -F '[: ]' '{print $4}')
			make_usb_xml_by_port $bus $device
			vm_name=$(sudo virsh list --name --state-running | grep -v $exclude | dmenu -l 10 -p "$script_title: Connect to")
			sudo virsh attach-device $vm_name $usb_xml > $temp_file 2>&1
			notify-send "$script_title" "$(cat $temp_file)"
		fi
		;;
	"Disconnect USB by port")
		usb_device=$(lsusb | grep -v 'hub\|Hub' | dmenu -l 20 -p "$script_title: Disconnect USB")
		if [ -n "$usb_device" ]
		then
			bus=$(echo $usb_device | awk '{print $2}')
			device=$(echo $usb_device | awk -F '[: ]' '{print $4}')
			make_usb_xml_by_port $bus $device
			vm_name=$(sudo virsh list --name --state-running | grep -v $exclude | dmenu -l 10 -p "$script_title: Disconnect from")
			sudo virsh detach-device $vm_name $usb_xml > $temp_file 2>&1
			notify-send "$script_title" "$(cat $temp_file)"
		fi
		;;
	"CPU governor")
		governors="performance\npowersave\nuserspace\nondemand\nconservative\nschedutil"
		current_covernor=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
		new_governor=$(printf "$governors" | dmenu -l 10 -p "Current CPU governor: $current_covernor")
		if [ -n "$new_governor" ]
		then
			current_covernor=$(sudo cpu-set-governor $new_governor)
			notify-send "$script_title" "CPU governor set to '$current_covernor'"
		fi
		;;
	"Disable GPU Passthrough")
		sudo mv /etc/modprobe.d/vfio.conf /etc/modprobe.d/disabled-vfio.conf
		sudo mkinitcpio -p linux
		sudo cp -f /etc/default/no-pci-stub-grub /etc/default/grub
		sudo grub-mkconfig -o /boot/grub/grub.cfg
		cp -f $HOME/.screenlayout/double-gpu.sh $HOME/.screenlayout/default.sh
		notify-send "$script_title" "GPU passthrough disabled"
		;;
	"Enable GPU Passthrough")
		sudo mv /etc/modprobe.d/disabled-vfio.conf /etc/modprobe.d/vfio.conf
		sudo mkinitcpio -p linux
		sudo cp -f /etc/default/pci-stub-grub /etc/default/grub
		sudo grub-mkconfig -o /boot/grub/grub.cfg
		cp -f $HOME/.screenlayout/single-gpu.sh $HOME/.screenlayout/default.sh
		notify-send "$script_title" "GPU passthrough enabled"
esac
